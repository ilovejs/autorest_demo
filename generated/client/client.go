package client

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"net/http"

	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"

	. "github.com/ilovejs/autodemoapi/model"
)

const (
	// DefaultBaseURI is the default URI used for the service Githubcomilovejsautodemo
	DefaultBaseURI = "http://localhost:3000"
)

// BaseClient is the base client for Githubcomilovejsautodemo.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client using a custom endpoint.  Use this when interacting with
// an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// GetDog get a dog
func (client BaseClient) GetDog(ctx context.Context) (result Dog, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, Fqdn+"/BaseClient.GetDog")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDogPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "GetDog", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDogSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "GetDog", resp, "Failure sending request")
		return
	}

	result, err = client.GetDogResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "GetDog", resp, "Failure responding to request")
		return
	}

	return
}

// GetDogPreparer prepares the GetDog request.
func (client BaseClient) GetDogPreparer(ctx context.Context) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/pets"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDogSender sends the GetDog request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetDogSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetDogResponder handles the response to the GetDog request. The method always
// closes the http.Response Body.
func (client BaseClient) GetDogResponder(resp *http.Response) (result Dog, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostKitten post a kitten onto our servers
// Parameters:
// kitten - kitten
func (client BaseClient) PostKitten(ctx context.Context, kitten Kitten) (result String, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, Fqdn+"/BaseClient.PostKitten")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PostKittenPreparer(ctx, kitten)
	if err != nil {
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "PostKitten", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostKittenSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "PostKitten", resp, "Failure sending request")
		return
	}

	result, err = client.PostKittenResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "PostKitten", resp, "Failure responding to request")
		return
	}

	return
}

// PostKittenPreparer prepares the PostKitten request.
func (client BaseClient) PostKittenPreparer(ctx context.Context, kitten Kitten) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/pets"),
		autorest.WithJSON(kitten))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostKittenSender sends the PostKitten request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PostKittenSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostKittenResponder handles the response to the PostKitten request. The method always
// closes the http.Response Body.
func (client BaseClient) PostKittenResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PutCat put a cat onto our servers
// Parameters:
// cat - cat
func (client BaseClient) PutCat(ctx context.Context, cat Cat) (result String, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, Fqdn+"/BaseClient.PutCat")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PutCatPreparer(ctx, cat)
	if err != nil {
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "PutCat", nil, "Failure preparing request")
		return
	}

	resp, err := client.PutCatSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "PutCat", resp, "Failure sending request")
		return
	}

	result, err = client.PutCatResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "githubcomilovejsautodemo.BaseClient", "PutCat", resp, "Failure responding to request")
		return
	}

	return
}

// PutCatPreparer prepares the PutCat request.
func (client BaseClient) PutCatPreparer(ctx context.Context, cat Cat) (*http.Request, error) {
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/pets"),
		autorest.WithJSON(cat))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PutCatSender sends the PutCat request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PutCatSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PutCatResponder handles the response to the PutCat request. The method always
// closes the http.Response Body.
func (client BaseClient) PutCatResponder(resp *http.Response) (result String, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
